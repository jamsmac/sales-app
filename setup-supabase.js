#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const readline = require('readline');

console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                üöÄ –ù–ê–°–¢–†–û–ô–ö–ê SUPABASE                     ‚ïë
‚ïë           –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥–∞–∂ v5.0                    ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
`);

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

function question(prompt) {
    return new Promise((resolve) => {
        rl.question(prompt, resolve);
    });
}

async function main() {
    try {
        console.log('–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Supabase –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.\n');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
        const envPath = path.join(__dirname, '.env');
        const envExamplePath = path.join(__dirname, '.env.example');
        
        if (!fs.existsSync(envPath)) {
            console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ –∏–∑ .env.example...');
            if (fs.existsSync(envExamplePath)) {
                fs.copyFileSync(envExamplePath, envPath);
                console.log('‚úÖ .env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω');
            } else {
                console.log('‚ùå .env.example –Ω–µ –Ω–∞–π–¥–µ–Ω');
                process.exit(1);
            }
        }
        
        console.log('\nüîß –ù–ê–°–¢–†–û–ô–ö–ê SUPABASE');
        console.log('–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–∞–º –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ Supabase:');
        console.log('1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://app.supabase.com');
        console.log('2. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç');
        console.log('3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Settings ‚Üí API');
        console.log('4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª—é—á–∏\n');
        
        const useSupabase = await question('–•–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Supabase? (y/n): ');
        
        if (useSupabase.toLowerCase() === 'y' || useSupabase.toLowerCase() === 'yes') {
            const supabaseUrl = await question('–í–≤–µ–¥–∏—Ç–µ Supabase URL (https://xxxxx.supabase.co): ');
            const supabaseAnonKey = await question('–í–≤–µ–¥–∏—Ç–µ Supabase Anon Key: ');
            const supabaseServiceKey = await question('–í–≤–µ–¥–∏—Ç–µ Supabase Service Role Key: ');
            
            // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π .env —Ñ–∞–π–ª
            let envContent = fs.readFileSync(envPath, 'utf8');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Supabase
            envContent = envContent.replace(/SUPABASE_URL=.*/, `SUPABASE_URL=${supabaseUrl}`);
            envContent = envContent.replace(/SUPABASE_ANON_KEY=.*/, `SUPABASE_ANON_KEY=${supabaseAnonKey}`);
            envContent = envContent.replace(/SUPABASE_SERVICE_KEY=.*/, `SUPABASE_SERVICE_KEY=${supabaseServiceKey}`);
            envContent = envContent.replace(/DATABASE_TYPE=.*/, 'DATABASE_TYPE=supabase');
            
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π .env —Ñ–∞–π–ª
            fs.writeFileSync(envPath, envContent);
            
            console.log('\n‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ .env —Ñ–∞–π–ª');
            
            console.log('\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
            console.log('1. –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL —Å—Ö–µ–º—É –≤ Supabase:');
            console.log('   - –û—Ç–∫—Ä–æ–π—Ç–µ Supabase Dashboard ‚Üí SQL Editor');
            console.log('   - –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ supabase-schema.sql');
            console.log('   - –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å');
            console.log('');
            console.log('2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:');
            console.log('   npm install');
            console.log('');
            console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:');
            console.log('   npm start');
            console.log('');
            console.log('4. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä:');
            console.log('   http://localhost:3000');
            console.log('');
            console.log('5. –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤:');
            console.log('   http://localhost:3000/test-upload.html');
            
        } else {
            console.log('\nüìù –û—Å—Ç–∞–≤–ª—è–µ–º SQLite –∫–∞–∫ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º SQLite –≤ .env
            let envContent = fs.readFileSync(envPath, 'utf8');
            envContent = envContent.replace(/DATABASE_TYPE=.*/, 'DATABASE_TYPE=sqlite');
            fs.writeFileSync(envPath, envContent);
            
            console.log('\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
            console.log('1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:');
            console.log('   npm install');
            console.log('');
            console.log('2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:');
            console.log('   npm start');
            console.log('');
            console.log('3. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä:');
            console.log('   http://localhost:3000');
        }
        
        console.log('\nüîê –£–ß–ï–¢–ù–´–ï –î–ê–ù–ù–´–ï –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ:');
        console.log('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: admin / admin123');
        console.log('–ë—É—Ö–≥–∞–ª—Ç–µ—Ä: buh1 / buh123');
        
        console.log('\nüìö –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø:');
        console.log('- –ü–æ–ª–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ Supabase: SUPABASE_INTEGRATION.md');
        console.log('- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏: /test-upload.html');
        
        console.log('\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        
    } catch (error) {
        console.error('\n‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', error.message);
        process.exit(1);
    } finally {
        rl.close();
    }
}

main();
