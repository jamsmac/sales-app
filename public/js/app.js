// –ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const App = {
    API_URL: window.location.hostname === 'localhost' 
        ? 'http://localhost:3001' 
        : window.location.origin,
    
    user: null,
    token: null,
    data: {
        orders: [],
        stats: {},
        files: []
    },
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    async init() {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        this.token = localStorage.getItem('token');
        const userStr = localStorage.getItem('user');
        
        if (!this.token || !userStr) {
            window.location.href = '/login.html';
            return;
        }
        
        this.user = JSON.parse(userStr);
        
        // –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å
        this.applyUserRole();
        
        // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        await this.loadData();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        this.initUI();
    },
    
    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    applyUserRole() {
        const { role, fullName } = this.user;
        
        // –û–±–Ω–æ–≤–∏—Ç—å UI
        document.getElementById('userName').textContent = fullName;
        document.getElementById('userRole').textContent = 
            role === 'admin' ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä';
        
        // –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∞—Å—Å —Ä–æ–ª–∏
        if (role === 'accountant') {
            document.body.classList.add('role-accountant');
            document.getElementById('roleBadge').textContent = '–†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞';
        }
    },
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    async loadData() {
        try {
            this.showLoading(true);
            
            // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã
            const ordersResponse = await this.apiRequest('/api/orders');
            this.data.orders = ordersResponse;
            
            // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const statsResponse = await this.apiRequest('/api/orders/stats');
            this.data.stats = statsResponse;
            
            // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
            if (this.user.role === 'admin') {
                const filesResponse = await this.apiRequest('/api/files');
                this.data.files = filesResponse;
            }
            
            // –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.updateStats();
            this.buildTable();
            
        } catch (error) {
            this.showToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
            console.error(error);
        } finally {
            this.showLoading(false);
        }
    },
    
    // API –∑–∞–ø—Ä–æ—Å
    async apiRequest(endpoint, options = {}) {
        const response = await fetch(`${this.API_URL}${endpoint}`, {
            ...options,
            headers: {
                'Authorization': `Bearer ${this.token}`,
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
        
        if (!response.ok) {
            if (response.status === 401) {
                // –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫
                localStorage.clear();
                window.location.href = '/login.html';
            }
            throw new Error(`API Error: ${response.status}`);
        }
        
        return response.json();
    },
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
    initUI() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–∫–ª–∞–¥–æ–∫
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const tab = e.target.dataset.tab;
                this.switchTab(tab);
            });
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
        if (this.user.role === 'admin') {
            this.initFileUpload();
        }
        
        // –ü–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
        document.getElementById('tableSearch')?.addEventListener('input', (e) => {
            this.filterTable(e.target.value);
        });
    },
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
    switchTab(tabName) {
        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        document.querySelectorAll('.tab-content').forEach(content => {
            content.classList.remove('active');
        });
        
        // –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é
        document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');
        document.getElementById(`${tabName}-tab`).classList.add('active');
        
        // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if (tabName === 'charts') {
            this.buildCharts();
        } else if (tabName === 'products') {
            this.buildProducts();
        } else if (tabName === 'database') {
            this.buildDatabase();
        }
    },
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    updateStats() {
        const stats = this.data.stats;
        const statsGrid = document.getElementById('statsGrid');
        
        const cards = [
            {
                icon: 'üí∞',
                label: '–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞',
                value: this.formatNumber(stats.totalRevenue || 0),
                color: 'primary'
            },
            {
                icon: 'üì¶',
                label: '–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤',
                value: stats.total || 0,
                color: 'info'
            },
            {
                icon: 'üíµ',
                label: '–ù–∞–ª–∏—á–Ω—ã–µ',
                value: this.formatNumber(stats.byPaymentType?.CASH?.total || 0),
                color: 'success'
            },
            {
                icon: 'üì±',
                label: 'QR –ø–ª–∞—Ç–µ–∂–∏',
                value: this.formatNumber(stats.byPaymentType?.QR?.total || 0),
                color: 'info'
            },
            {
                icon: 'üí≥',
                label: '–ö–∞—Ä—Ç—ã',
                value: this.formatNumber(stats.byPaymentType?.CARD?.total || 0),
                color: 'warning'
            },
            {
                icon: '‚Ü©Ô∏è',
                label: '–í–æ–∑–≤—Ä–∞—Ç—ã',
                value: this.formatNumber(stats.returns || 0),
                color: 'error'
            }
        ];
        
        statsGrid.innerHTML = cards.map(card => `
            <div class="stat-card stat-${card.color}">
                <div class="stat-icon">${card.icon}</div>
                <div class="stat-value">${card.value}</div>
                <div class="stat-label">${card.label}</div>
            </div>
        `).join('');
    },
    
    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    buildTable() {
        const table = document.getElementById('dataTable');
        if (!table) return;
        
        // –ó–∞–≥–æ–ª–æ–≤–∫–∏
        const thead = table.querySelector('thead');
        thead.innerHTML = `
            <tr>
                <th>‚Ññ</th>
                <th>–î–∞—Ç–∞</th>
                <th>–¢–æ–≤–∞—Ä</th>
                <th>–í–∞—Ä–∏–∞–Ω—Ç</th>
                <th>–¢–∏–ø –æ–ø–ª–∞—Ç—ã</th>
                <th class="text-right">–°—É–º–º–∞</th>
            </tr>
        `;
        
        // –î–∞–Ω–Ω—ã–µ
        const tbody = table.querySelector('tbody');
        tbody.innerHTML = this.data.orders.map((order, i) => `
            <tr>
                <td>${i + 1}</td>
                <td>${new Date(order.date).toLocaleDateString('ru-RU')}</td>
                <td>${order.product}</td>
                <td>${order.flavor}</td>
                <td>${this.getPaymentTypeLabel(order.paymentType)}</td>
                <td class="text-right">${this.formatNumber(order.price)}</td>
            </tr>
        `).join('');
    },
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    initFileUpload() {
        const uploadArea = document.getElementById('uploadArea');
        const fileInput = document.getElementById('fileInput');
        
        // Drag & Drop
        uploadArea?.addEventListener('dragover', (e) => {
            e.preventDefault();
            uploadArea.classList.add('dragover');
        });
        
        uploadArea?.addEventListener('dragleave', () => {
            uploadArea.classList.remove('dragover');
        });
        
        uploadArea?.addEventListener('drop', async (e) => {
            e.preventDefault();
            uploadArea.classList.remove('dragover');
            
            const file = e.dataTransfer.files[0];
            if (file) {
                await this.uploadFile(file);
            }
        });
        
        // –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞
        fileInput?.addEventListener('change', async (e) => {
            const file = e.target.files[0];
            if (file) {
                await this.uploadFile(file);
            }
        });
    },
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    async uploadFile(file) {
        if (!file.name.match(/\.(xlsx|xls)$/i)) {
            this.showToast('–¢–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã Excel (.xlsx, .xls)', 'error');
            return;
        }
        
        const formData = new FormData();
        formData.append('file', file);
        
        try {
            this.showLoading(true);
            
            const response = await fetch(`${this.API_URL}/api/files/upload`, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${this.token}`
                },
                body: formData
            });
            
            const result = await response.json();
            
            if (response.ok) {
                this.showToast(result.message, 'success');
                
                // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
                this.showUploadStats(result.stats);
                
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                await this.loadData();
            } else {
                throw new Error(result.error);
            }
        } catch (error) {
            this.showToast(error.message, 'error');
        } finally {
            this.showLoading(false);
        }
    },
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
    showUploadStats(stats) {
        const modal = document.getElementById('modal');
        modal.innerHTML = `
            <div class="modal-content">
                <div class="modal-header">
                    <h3>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞</h3>
                    <button onclick="App.closeModal()">‚úï</button>
                </div>
                <div class="modal-body">
                    <div class="upload-stats">
                        <div class="stat-item">
                            <span>–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:</span>
                            <strong>${stats.total} –∑–∞–ø–∏—Å–µ–π</strong>
                        </div>
                        <div class="stat-item success">
                            <span>‚úÖ –ù–æ–≤—ã—Ö –¥–æ–±–∞–≤–ª–µ–Ω–æ:</span>
                            <strong>${stats.new} –∑–∞–ø–∏—Å–µ–π</strong>
                        </div>
                        <div class="stat-item warning">
                            <span>üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ:</span>
                            <strong>${stats.updated} –∑–∞–ø–∏—Å–µ–π</strong>
                        </div>
                        <div class="stat-item info">
                            <span>‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç–æ–≤:</span>
                            <strong>${stats.duplicate} –∑–∞–ø–∏—Å–µ–π</strong>
                        </div>
                    </div>
                </div>
            </div>
        `;
        modal.classList.add('active');
    },
    
    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    buildCharts() {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è Chart.js
        const chartsGrid = document.getElementById('chartsGrid');
        chartsGrid.innerHTML = '<p>–ì—Ä–∞—Ñ–∏–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...</p>';
    },
    
    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
    buildProducts() {
        const container = document.getElementById('productsContainer');
        container.innerHTML = '<p>–ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...</p>';
    },
    
    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async buildDatabase() {
        const dbContent = document.getElementById('dbContent');
        
        try {
            const info = await this.apiRequest('/api/database/info');
            
            document.getElementById('dbStats').innerHTML = `
                <div class="db-info-grid">
                    <div class="db-info-card">
                        <span>–ó–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ:</span>
                        <strong>${info.totalRecords}</strong>
                    </div>
                    <div class="db-info-card">
                        <span>–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:</span>
                        <strong>${info.totalFiles}</strong>
                    </div>
                    <div class="db-info-card">
                        <span>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</span>
                        <strong>${info.lastUpdate ? new Date(info.lastUpdate).toLocaleString('ru-RU') : '-'}</strong>
                    </div>
                    <div class="db-info-card">
                        <span>–†–∞–∑–º–µ—Ä –±–∞–∑—ã:</span>
                        <strong>${Math.round(info.dbSize)} KB</strong>
                    </div>
                </div>
            `;
            
            if (this.user.role === 'admin') {
                const files = await this.apiRequest('/api/files');
                dbContent.innerHTML = `
                    <h3>–ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤</h3>
                    <div class="files-list">
                        ${files.map(file => `
                            <div class="file-item">
                                <span class="file-name">üìÑ ${file.fileName}</span>
                                <span class="file-date">${new Date(file.uploadDate).toLocaleString('ru-RU')}</span>
                                <span class="file-stats">
                                    <span class="badge">+${file.recordsNew}</span>
                                </span>
                            </div>
                        `).join('')}
                    </div>
                `;
            }
        } catch (error) {
            dbContent.innerHTML = '<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</p>';
        }
    },
    
    // –£—Ç–∏–ª–∏—Ç—ã
    formatNumber(num) {
        return new Intl.NumberFormat('ru-RU').format(Math.round(num));
    },
    
    getPaymentTypeLabel(type) {
        const labels = {
            'CASH': '–ù–∞–ª–∏—á–Ω—ã–µ',
            'QR': 'QR –∫–æ–¥',
            'VIP': 'VIP',
            'CARD': '–ö–∞—Ä—Ç–∞',
            'RETURN': '–í–æ–∑–≤—Ä–∞—Ç'
        };
        return labels[type] || type;
    },
    
    showToast(message, type = 'success') {
        const container = document.getElementById('toastContainer');
        const toast = document.createElement('div');
        toast.className = `toast toast-${type}`;
        toast.textContent = message;
        container.appendChild(toast);
        
        setTimeout(() => toast.remove(), 3000);
    },
    
    showLoading(show) {
        const overlay = document.getElementById('loadingOverlay');
        overlay.classList.toggle('active', show);
    },
    
    closeModal() {
        document.getElementById('modal').classList.remove('active');
    },
    
    filterTable(searchTerm) {
        const rows = document.querySelectorAll('#dataTable tbody tr');
        const term = searchTerm.toLowerCase();
        
        rows.forEach(row => {
            const text = row.textContent.toLowerCase();
            row.style.display = text.includes(term) ? '' : 'none';
        });
    }
};

// –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞
function logout() {
    if (confirm('–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?')) {
        localStorage.clear();
        window.location.href = '/login.html';
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
async function clearDatabase() {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!')) return;
    
    try {
        await App.apiRequest('/api/database/clear', { method: 'DELETE' });
        App.showToast('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞', 'success');
        await App.loadData();
    } catch (error) {
        App.showToast('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', 'error');
    }
}

async function exportDatabase() {
    try {
        const result = await App.apiRequest('/api/export');
        window.open(`${App.API_URL}${result.url}`, '_blank');
        App.showToast('–≠–∫—Å–ø–æ—Ä—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω', 'success');
    } catch (error) {
        App.showToast('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞', 'error');
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    App.init();
});
