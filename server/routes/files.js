const express = require('express');
const multer = require('multer');
const XLSX = require('xlsx');
const path = require('path');
const fs = require('fs').promises;
const router = express.Router();
const auth = require('../middleware/auth.middleware');
const db = require('../utils/database');

console.log('üìÅ Files router –∑–∞–≥—Ä—É–∂–µ–Ω');

// –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ uploads
const uploadsDir = path.join(__dirname, '../../uploads');
fs.access(uploadsDir)
    .then(() => console.log('‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è uploads —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', uploadsDir))
    .catch(() => {
        console.log('‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ uploads:', uploadsDir);
        return fs.mkdir(uploadsDir, { recursive: true });
    });

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π
const storage = multer.diskStorage({
    destination: async (req, file, cb) => {
        console.log('üìÇ Multer: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        const uploadDir = path.join(__dirname, '../../uploads');
        
        try {
            await fs.mkdir(uploadDir, { recursive: true });
            console.log('‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≥–æ—Ç–æ–≤–∞:', uploadDir);
            cb(null, uploadDir);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:', error);
            cb(error);
        }
    },
    filename: (req, file, cb) => {
        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
        const filename = file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname);
        console.log('üìù Multer: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞:', filename);
        cb(null, filename);
    }
});

// –°–æ–∑–¥–∞–Ω–∏–µ multer instance —Å –æ—Ç–ª–∞–¥–∫–æ–π
const upload = multer({ 
    storage: storage,
    limits: { 
        fileSize: parseInt(process.env.MAX_FILE_SIZE) || 52428800,
        files: 1,
        fields: 10
    },
    fileFilter: (req, file, cb) => {
        console.log('üîç Multer: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞');
        console.log('   - –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è:', file.originalname);
        console.log('   - MIME —Ç–∏–ø:', file.mimetype);
        console.log('   - –ü–æ–ª–µ —Ñ–æ—Ä–º—ã:', file.fieldname);
        console.log('   - –ö–æ–¥–∏—Ä–æ–≤–∫–∞:', file.encoding);
        
        if (file.originalname.match(/\.(xlsx|xls)$/i)) {
            console.log('‚úÖ –§–∞–π–ª –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∏–ø–∞');
            cb(null, true);
        } else {
            console.error('‚ùå –§–∞–π–ª –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∏–ø–∞');
            cb(new Error('–¢–æ–ª—å–∫–æ Excel —Ñ–∞–π–ª—ã (.xlsx, .xls) —Ä–∞–∑—Ä–µ—à–µ–Ω—ã'));
        }
    }
});

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
router.use((req, res, next) => {
    console.log(`üì® ${req.method} ${req.path}`);
    console.log('   Headers:', JSON.stringify(req.headers, null, 2));
    console.log('   User:', req.user ? req.user.username : '–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    next();
});

// Upload endpoint —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π
router.post('/upload', 
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    (req, res, next) => {
        console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
        auth(req, res, (err) => {
            if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', err);
                return res.status(401).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
            }
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', req.user.username);
            next();
        });
    },
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
    (req, res, next) => {
        console.log('üë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        if (req.user.role !== 'admin') {
            console.error('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤. –†–æ–ª—å:', req.user.role);
            return res.status(403).json({ error: '–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
        }
        console.log('‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã');
        next();
    },
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å –æ—Ç–ª–∞–¥–∫–æ–π
    (req, res, next) => {
        console.log('üì§ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞');
        console.log('   Content-Type:', req.headers['content-type']);
        console.log('   Content-Length:', req.headers['content-length']);
        
        const uploadHandler = upload.single('file');
        
        uploadHandler(req, res, (err) => {
            if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ Multer:', err);
                console.error('   –ö–æ–¥ –æ—à–∏–±–∫–∏:', err.code);
                console.error('   –°–æ–æ–±—â–µ–Ω–∏–µ:', err.message);
                console.error('   –°—Ç–µ–∫:', err.stack);
                
                if (err.code === 'LIMIT_FILE_SIZE') {
                    return res.status(400).json({ 
                        error: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 50MB)',
                        details: `–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${req.headers['content-length']} –±–∞–π—Ç`
                    });
                }
                
                return res.status(400).json({ 
                    error: err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞',
                    details: err.toString()
                });
            }
            
            console.log('‚úÖ Multer –æ–±—Ä–∞–±–æ—Ç–∞–ª –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ');
            next();
        });
    },
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
    async (req, res) => {
        console.log('üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞');
        
        if (!req.file) {
            console.error('‚ùå req.file –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
            console.log('   req.body:', req.body);
            console.log('   req.files:', req.files);
            return res.status(400).json({ 
                error: '–§–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω',
                details: 'req.file is undefined'
            });
        }
        
        console.log('üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ:');
        console.log('   - –ü—É—Ç—å:', req.file.path);
        console.log('   - –†–∞–∑–º–µ—Ä:', req.file.size, '–±–∞–π—Ç');
        console.log('   - –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è:', req.file.originalname);
        console.log('   - –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫:', req.file.filename);
        
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
            await fs.access(req.file.path);
            console.log('‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ –¥–∏—Å–∫–µ');
            
            // –ß—Ç–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–∞
            console.log('üìñ –ß—Ç–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–∞...');
            const workbook = XLSX.readFile(req.file.path);
            console.log('   - –õ–∏—Å—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ:', workbook.SheetNames.length);
            console.log('   - –ù–∞–∑–≤–∞–Ω–∏—è –ª–∏—Å—Ç–æ–≤:', workbook.SheetNames);
            
            const sheetName = workbook.SheetNames[0];
            console.log('   - –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—Å—Ç–∞:', sheetName);
            
            const worksheet = workbook.Sheets[sheetName];
            const data = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
            console.log('   - –°—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö:', data.length);
            console.log('   - –ö–æ–ª–æ–Ω–æ–∫ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ:', data[0] ? data[0].length : 0);
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î...');
            const stats = db.processFileData(data, req.file, req.user.id);
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã:', stats);
            
            // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            try {
                await fs.unlink(req.file.path);
                console.log('üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω');
            } catch (e) {
                console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª:', e.message);
            }
            
            // –û—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            const response = {
                success: true,
                stats: stats,
                message: `–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –î–æ–±–∞–≤–ª–µ–Ω–æ ${stats.new} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π.`,
                file: {
                    name: req.file.originalname,
                    size: req.file.size,
                    records: data.length - 1
                }
            };
            
            console.log('‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:', response);
            res.json(response);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:', error);
            console.error('   –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
            console.error('   –°—Ç–µ–∫:', error.stack);
            
            // –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if (req.file && req.file.path) {
                try {
                    await fs.unlink(req.file.path);
                    console.log('üóëÔ∏è –§–∞–π–ª —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏');
                } catch (e) {
                    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏');
                }
            }
            
            res.status(500).json({ 
                error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞',
                message: error.message,
                details: process.env.NODE_ENV === 'development' ? error.stack : undefined
            });
        }
    }
);

// Get files list
router.get('/', auth, (req, res) => {
    console.log('üìã –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤');
    try {
        const files = db.getFiles();
        console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∏–∑ ${files.length} —Ñ–∞–π–ª–æ–≤`);
        res.json(files);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤' });
    }
});

// –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
router.get('/test', (req, res) => {
    console.log('üß™ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ files router');
    res.json({ 
        status: 'ok', 
        message: 'Files router —Ä–∞–±–æ—Ç–∞–µ—Ç',
        uploadDir: uploadsDir,
        maxFileSize: parseInt(process.env.MAX_FILE_SIZE) || 52428800
    });
});

module.exports = router;
