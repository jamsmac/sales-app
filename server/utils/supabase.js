const { createClient } = require('@supabase/supabase-js');
const bcrypt = require('bcryptjs');

console.log('üóÑÔ∏è Supabase database utility –∑–∞–≥—Ä—É–∂–µ–Ω');

class SupabaseDatabase {
    constructor() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
        this.supabaseUrl = process.env.SUPABASE_URL;
        this.supabaseKey = process.env.SUPABASE_SERVICE_KEY; // –ò—Å–ø–æ–ª—å–∑—É–µ–º service key –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        
        if (!this.supabaseUrl || !this.supabaseKey) {
            console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_KEY');
            throw new Error('Supabase configuration missing');
        }
        
        this.supabase = createClient(this.supabaseUrl, this.supabaseKey, {
            db: {
                schema: 'public',
            },
            auth: {
                persistSession: false
            },
            global: {
                headers: { 'x-client': 'sales-analytics-v5' },
            },
        });
        console.log('‚úÖ Supabase –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        // –î–æ–±–∞–≤–ª—è–µ–º retry –ª–æ–≥–∏–∫—É
        this.maxRetries = 3;
        this.retryDelay = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)
    async init() {
        try {
            console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...');
            const { data, error } = await this.supabase
                .from('users')
                .select('count')
                .limit(1);
            
            if (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:', error);
                throw error;
            }
            
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase:', error);
            throw error;
        }
    }

    // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async authenticateUser(username, password) {
        try {
            console.log('üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', username);
            
            const { data: users, error } = await this.supabase
                .from('users')
                .select('*')
                .eq('username', username)
                .limit(1);
            
            if (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
                throw error;
            }
            
            if (!users || users.length === 0) {
                console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', username);
                return null;
            }
            
            const user = users[0];
            const isValidPassword = await bcrypt.compare(password, user.password_hash);
            
            if (!isValidPassword) {
                console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', username);
                return null;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
            await this.supabase
                .from('users')
                .update({ last_login: new Date().toISOString() })
                .eq('id', user.id);
            
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω:', username);
            return {
                id: user.id,
                username: user.username,
                fullName: user.full_name,
                role: user.role
            };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
            throw error;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
    async getOrders() {
        try {
            console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ Supabase...');
            
            const { data: orders, error } = await this.supabase
                .from('orders')
                .select('*')
                .order('operation_date', { ascending: false });
            
            if (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', error);
                throw error;
            }
            
            console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${orders.length} –∑–∞–∫–∞–∑–æ–≤`);
            return orders.map(order => ({
                id: order.id,
                orderNumber: order.order_number,
                product: order.product_name,
                productName: order.product_name,
                flavor: order.product_variant,
                productVariant: order.product_variant,
                paymentType: order.payment_type,
                quantity: parseFloat(order.quantity),
                price: parseFloat(order.total_amount),
                totalAmount: parseFloat(order.total_amount),
                isReturn: order.is_return,
                date: order.operation_date,
                operationDate: order.operation_date,
                cashier: order.cashier
            }));
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', error);
            throw error;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    async getStats() {
        try {
            console.log('üìà –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ Supabase...');
            
            // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            const { data: totalStats, error: totalError } = await this.supabase
                .rpc('get_total_stats');
            
            if (totalError) {
                console.log('‚ö†Ô∏è RPC —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å');
                
                // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                const { data: orders, error } = await this.supabase
                    .from('orders')
                    .select('payment_type, total_amount, is_return');
                
                if (error) throw error;
                
                const stats = {
                    totalRevenue: 0,
                    byPaymentType: {},
                    returns: 0
                };
                
                orders.forEach(order => {
                    const amount = parseFloat(order.total_amount);
                    
                    if (order.is_return) {
                        stats.returns += amount;
                    } else {
                        stats.totalRevenue += amount;
                        
                        if (!stats.byPaymentType[order.payment_type]) {
                            stats.byPaymentType[order.payment_type] = { total: 0, count: 0 };
                        }
                        
                        stats.byPaymentType[order.payment_type].total += amount;
                        stats.byPaymentType[order.payment_type].count += 1;
                    }
                });
                
                console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞');
                return stats;
            }
            
            return totalStats;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            throw error;
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
    async processFileData(data, fileInfo, userId) {
        try {
            console.log('üíæ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞ –≤ Supabase...');
            console.log(`   - –°—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö: ${data.length}`);
            
            const stats = {
                total: data.length - 1, // –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                new: 0,
                updated: 0,
                duplicate: 0,
                errors: 0
            };
            
            // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            const { data: fileRecord, error: fileError } = await this.supabase
                .from('uploaded_files')
                .insert({
                    file_name: fileInfo.filename,
                    original_name: fileInfo.originalname,
                    file_size: fileInfo.size,
                    mime_type: fileInfo.mimetype,
                    uploaded_by: userId,
                    processing_status: 'processing'
                })
                .select()
                .single();
            
            if (fileError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', fileError);
                throw fileError;
            }
            
            const fileId = fileRecord.id;
            console.log(`‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ID: ${fileId}`);
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫)
            const orders = [];
            
            for (let i = 1; i < data.length; i++) {
                const row = data[i];
                
                try {
                    // –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                    const order = this.parseOrderRow(row, fileId, userId);
                    if (order) {
                        orders.push(order);
                    }
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ ${i}:`, error);
                    stats.errors++;
                }
            }
            
            // –ú–∞—Å—Å–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ –∑–∞–∫–∞–∑–æ–≤
            if (orders.length > 0) {
                console.log(`üìù –í—Å—Ç–∞–≤–∫–∞ ${orders.length} –∑–∞–∫–∞–∑–æ–≤...`);
                
                const { data: insertedOrders, error: insertError } = await this.supabase
                    .from('orders')
                    .insert(orders)
                    .select();
                
                if (insertError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', insertError);
                    stats.errors += orders.length;
                } else {
                    stats.new = insertedOrders.length;
                    console.log(`‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ ${stats.new} –∑–∞–∫–∞–∑–æ–≤`);
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∞–π–ª–∞
            await this.supabase
                .from('uploaded_files')
                .update({
                    records_total: stats.total,
                    records_new: stats.new,
                    records_updated: stats.updated,
                    records_duplicate: stats.duplicate,
                    records_error: stats.errors,
                    processing_status: 'completed'
                })
                .eq('id', fileId);
            
            console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', stats);
            return stats;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:', error);
            throw error;
        }
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –∑–∞–∫–∞–∑–∞
    parseOrderRow(row, fileId, userId) {
        try {
            // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: –ù–æ–º–µ—Ä, –ö–æ–¥, –¢–æ–≤–∞—Ä, –í–∞—Ä–∏–∞–Ω—Ç, –¢–∏–ø –æ–ø–ª–∞—Ç—ã, –ö–æ–ª-–≤–æ, –ï–¥., –¶–µ–Ω–∞, –°–∫–∏–¥–∫–∞%, –°–∫–∏–¥–∫–∞, –°—É–º–º–∞, –í—Ä–µ–º—è, –î–∞—Ç–∞, –ö–∞—Å—Å–∏—Ä
            const [
                orderNumber, productCode, productName, productVariant, paymentType,
                quantity, unit, pricePerUnit, discountPercent, discountAmount,
                totalAmount, time, date, cashier
            ] = row;
            
            if (!productName || !totalAmount || !date) {
                console.log('‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
                return null;
            }
            
            // –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã
            const operationDate = this.parseDate(date);
            if (!operationDate) {
                console.log('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞:', date);
                return null;
            }
            
            const dateObj = new Date(operationDate);
            
            return {
                order_number: orderNumber || null,
                product_code: productCode || null,
                product_name: String(productName).trim(),
                product_variant: productVariant ? String(productVariant).trim() : null,
                payment_type: this.normalizePaymentType(paymentType),
                payment_type_raw: paymentType || null,
                quantity: parseFloat(quantity) || 1,
                unit: unit || '—à—Ç',
                price_per_unit: parseFloat(pricePerUnit) || 0,
                discount_percent: parseFloat(discountPercent) || 0,
                discount_amount: parseFloat(discountAmount) || 0,
                total_amount: parseFloat(totalAmount) || 0,
                is_return: this.isReturnTransaction(paymentType, totalAmount),
                operation_date: operationDate,
                operation_time: time || null,
                year: dateObj.getFullYear(),
                month: dateObj.getMonth() + 1,
                day: dateObj.getDate(),
                cashier: cashier || null,
                file_id: fileId,
                uploaded_by: userId
            };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏:', error);
            return null;
        }
    }

    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∏–ø–∞ –æ–ø–ª–∞—Ç—ã
    normalizePaymentType(paymentType) {
        if (!paymentType) return 'UNKNOWN';
        
        const type = String(paymentType).toUpperCase().trim();
        
        if (type.includes('–ù–ê–õ–ò–ß–ù') || type.includes('CASH')) return 'CASH';
        if (type.includes('QR') || type.includes('–ö–†')) return 'QR';
        if (type.includes('VIP') || type.includes('–í–ò–ü')) return 'VIP';
        if (type.includes('–ö–ê–†–¢') || type.includes('CARD')) return 'CARD';
        if (type.includes('–í–û–ó–í–†–ê–¢') || type.includes('RETURN')) return 'RETURN';
        
        return type;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç
    isReturnTransaction(paymentType, amount) {
        if (paymentType && String(paymentType).toUpperCase().includes('–í–û–ó–í–†–ê–¢')) {
            return true;
        }
        
        if (parseFloat(amount) < 0) {
            return true;
        }
        
        return false;
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã
    parseDate(dateStr) {
        if (!dateStr) return null;
        
        try {
            // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            const str = String(dateStr).trim();
            
            // DD.MM.YYYY
            if (str.match(/^\d{1,2}\.\d{1,2}\.\d{4}$/)) {
                const [day, month, year] = str.split('.');
                return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
            }
            
            // YYYY-MM-DD
            if (str.match(/^\d{4}-\d{1,2}-\d{1,2}$/)) {
                return str;
            }
            
            // –ü–æ–ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
            const date = new Date(str);
            if (!isNaN(date.getTime())) {
                return date.toISOString().split('T')[0];
            }
            
            return null;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã:', error);
            return null;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
    async getFiles() {
        try {
            const { data: files, error } = await this.supabase
                .from('uploaded_files')
                .select(`
                    *,
                    uploader:uploaded_by(full_name)
                `)
                .order('uploaded_at', { ascending: false });
            
            if (error) throw error;
            
            return files.map(file => ({
                id: file.id,
                fileName: file.file_name,
                originalName: file.original_name,
                fileSize: file.file_size,
                uploadDate: file.uploaded_at,
                recordsTotal: file.records_total,
                recordsNew: file.records_new,
                recordsUpdated: file.records_updated,
                recordsDuplicate: file.records_duplicate,
                recordsErrors: file.records_error,
                uploadedByName: file.uploader?.full_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                processingStatus: file.processing_status
            }));
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤:', error);
            throw error;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async getDatabaseInfo() {
        try {
            const { data: ordersCount } = await this.supabase
                .from('orders')
                .select('id', { count: 'exact', head: true });
            
            const { data: filesCount } = await this.supabase
                .from('uploaded_files')
                .select('id', { count: 'exact', head: true });
            
            const { data: lastFile } = await this.supabase
                .from('uploaded_files')
                .select('uploaded_at')
                .order('uploaded_at', { ascending: false })
                .limit(1);
            
            return {
                totalRecords: ordersCount?.length || 0,
                totalFiles: filesCount?.length || 0,
                lastUpdate: lastFile?.[0]?.uploaded_at || null,
                dbSize: 'Supabase (–æ–±–ª–∞—á–Ω–∞—è –ë–î)'
            };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ë–î:', error);
            throw error;
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async clearDatabase() {
        try {
            console.log('üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
            
            // –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑—ã
            const { error: ordersError } = await this.supabase
                .from('orders')
                .delete()
                .neq('id', 0); // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
            
            if (ordersError) throw ordersError;
            
            // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã
            const { error: filesError } = await this.supabase
                .from('uploaded_files')
                .delete()
                .neq('id', 0);
            
            if (filesError) throw filesError;
            
            // –û—á–∏—â–∞–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            const { error: summaryError } = await this.supabase
                .from('sales_summary')
                .delete()
                .neq('id', 0);
            
            if (summaryError) throw summaryError;
            
            const { error: productsError } = await this.supabase
                .from('products_summary')
                .delete()
                .neq('id', 0);
            
            if (productsError) throw productsError;
            
            console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
            throw error;
        }
    }

    // –ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel –¥–∞–Ω–Ω—ã—Ö
    async processFileData(excelData, fileInfo, userId) {
        try {
            console.log('üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö Excel –≤ Supabase...');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            const { data: file, error: fileError } = await this.supabase
                .from('uploaded_files')
                .insert({
                    file_name: fileInfo.filename,
                    original_name: fileInfo.originalname,
                    file_size: fileInfo.size,
                    mime_type: fileInfo.mimetype,
                    uploaded_by: userId,
                    processing_status: 'processing'
                })
                .select()
                .single();
            
            if (fileError) throw fileError;
            
            const stats = {
                total: 0,
                new: 0,
                updated: 0,
                duplicate: 0,
                error: 0
            };
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            const dataRows = excelData.slice(1);
            stats.total = dataRows.length;
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
            for (const row of dataRows) {
                try {
                    // –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫ Excel –Ω–∞ –ø–æ–ª—è –ë–î
                    const orderData = this.mapExcelRowToOrder(row, excelData[0], file.id);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
                    const { data: existing } = await this.supabase
                        .from('orders')
                        .select('id')
                        .eq('order_number', orderData.order_number)
                        .single();
                    
                    if (existing) {
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
                        const { error } = await this.supabase
                            .from('orders')
                            .update(orderData)
                            .eq('id', existing.id);
                        
                        if (error) throw error;
                        stats.updated++;
                    } else {
                        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                        const { error } = await this.supabase
                            .from('orders')
                            .insert(orderData);
                        
                        if (error) throw error;
                        stats.new++;
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏:', error);
                    stats.error++;
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞
            await this.supabase
                .from('uploaded_files')
                .update({
                    processing_status: 'completed',
                    records_total: stats.total,
                    records_new: stats.new,
                    records_updated: stats.updated,
                    records_error: stats.error
                })
                .eq('id', file.id);
            
            console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', stats);
            return stats;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:', error);
            throw error;
        }
    }

    // –ú–∞–ø–ø–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö Excel –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î
    mapExcelRowToOrder(row, headers, fileId) {
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ –∫–æ–ª–æ–Ω–æ–∫
        const cols = {};
        headers.forEach((header, index) => {
            cols[header] = index;
        });
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–ª–∞—Ç—ã
        let paymentType = 'CASH';
        const paymentRaw = row[cols['–¢–∏–ø –æ–ø–ª–∞—Ç—ã']] || row[cols['Order resource']] || '';
        
        if (paymentRaw.toLowerCase().includes('qr')) paymentType = 'QR';
        else if (paymentRaw.toLowerCase().includes('card') || paymentRaw.toLowerCase().includes('–∫–∞—Ä—Ç')) paymentType = 'CARD';
        else if (paymentRaw.toLowerCase().includes('vip')) paymentType = 'VIP';
        else if (paymentRaw.toLowerCase().includes('return') || paymentRaw.toLowerCase().includes('–≤–æ–∑–≤—Ä–∞—Ç')) paymentType = 'RETURN';
        
        // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        let operationDate = new Date();
        if (row[cols['–î–∞—Ç–∞']] || row[cols['Time']]) {
            const dateValue = row[cols['–î–∞—Ç–∞']] || row[cols['Time']];
            // Excel —Ö—Ä–∞–Ω–∏—Ç –¥–∞—Ç—ã –∫–∞–∫ —á–∏—Å–ª–∞ (–¥–Ω–∏ —Å 1900-01-01)
            if (typeof dateValue === 'number') {
                operationDate = new Date((dateValue - 25569) * 86400 * 1000);
            } else {
                operationDate = new Date(dateValue);
            }
        }
        
        // –ü–∞—Ä—Å–∏–º —Å—É–º–º—É
        const parseAmount = (value) => {
            if (!value) return 0;
            return parseFloat(String(value).replace(/[^\d.-]/g, '')) || 0;
        };
        
        return {
            order_number: row[cols['–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞']] || row[cols['Order number']] || `order_${Date.now()}`,
            product_name: row[cols['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞']] || row[cols['–¢–æ–≤–∞—Ä']] || row[cols['Goods name']] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            product_variant: row[cols['–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∫—É—Å–∞']] || row[cols['–í–∞—Ä–∏–∞–Ω—Ç']] || '–°—Ç–∞–Ω–¥–∞—Ä—Ç',
            payment_type: paymentType,
            payment_type_raw: paymentRaw,
            quantity: parseFloat(row[cols['–ö–æ–ª-–≤–æ']] || row[cols['Quantity']] || 1),
            unit: row[cols['–ï–¥.']] || '—à—Ç',
            price_per_unit: parseAmount(row[cols['–¶–µ–Ω–∞']] || row[cols['Price']]),
            total_amount: parseAmount(row[cols['–°—É–º–º–∞']] || row[cols['Order price']] || row[cols['Total']]),
            discount_percent: parseFloat(row[cols['–°–∫–∏–¥–∫–∞%']] || 0),
            discount_amount: parseAmount(row[cols['–°–∫–∏–¥–∫–∞']] || 0),
            is_return: paymentType === 'RETURN',
            operation_date: operationDate.toISOString().split('T')[0],
            operation_time: operationDate.toTimeString().split(' ')[0],
            year: operationDate.getFullYear(),
            month: operationDate.getMonth() + 1,
            day: operationDate.getDate(),
            cashier: row[cols['–ö–∞—Å—Å–∏—Ä']] || row[cols['–û–ø–µ—Ä–∞—Ç–æ—Ä']] || null,
            customer_name: row[cols['–ö–ª–∏–µ–Ω—Ç']] || null,
            file_id: fileId,
            uploaded_by: null
        };
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
    async getOrders(filters = {}) {
        try {
            let query = this.supabase
                .from('orders')
                .select('*')
                .order('operation_date', { ascending: false });
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            if (filters.year) query = query.eq('year', filters.year);
            if (filters.month) query = query.eq('month', filters.month);
            if (filters.day) query = query.eq('day', filters.day);
            if (filters.paymentType && filters.paymentType !== 'ALL') {
                query = query.eq('payment_type', filters.paymentType);
            }
            
            const { data, error } = await query;
            
            if (error) throw error;
            return data;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', error);
            throw error;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–∫–∞–∑–æ–≤
    async getOrdersStats() {
        try {
            const { data, error } = await this.supabase
                .from('sales_summary')
                .select('*')
                .order('period_key', { ascending: false });
            
            if (error) throw error;
            
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
            const stats = {
                total: 0,
                byPaymentType: {
                    CASH: { count: 0, sum: 0 },
                    QR: { count: 0, sum: 0 },
                    VIP: { count: 0, sum: 0 },
                    CARD: { count: 0, sum: 0 },
                    RETURN: { count: 0, sum: 0 }
                },
                byPeriod: {}
            };
            
            data.forEach(row => {
                stats.total += row.total_amount;
                if (stats.byPaymentType[row.payment_type]) {
                    stats.byPaymentType[row.payment_type].count += row.transactions_count;
                    stats.byPaymentType[row.payment_type].sum += row.total_amount;
                }
                
                if (!stats.byPeriod[row.period_key]) {
                    stats.byPeriod[row.period_key] = {
                        total: 0,
                        byType: {}
                    };
                }
                stats.byPeriod[row.period_key].total += row.total_amount;
                stats.byPeriod[row.period_key].byType[row.payment_type] = row.total_amount;
            });
            
            return stats;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            throw error;
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Supabase Storage
    async uploadFileToStorage(buffer, filename, mimetype) {
        try {
            console.log('üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Supabase Storage...');
            
            // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            const timestamp = Date.now();
            const safeName = filename.replace(/[^a-zA-Z0-9.-]/g, '_');
            const storagePath = `uploads/${timestamp}_${safeName}`;
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Storage
            const { data, error } = await this.supabase.storage
                .from('excel-files')
                .upload(storagePath, buffer, {
                    contentType: mimetype,
                    upsert: false
                });
            
            if (error) throw error;
            
            // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
            const { data: { publicUrl } } = this.supabase.storage
                .from('excel-files')
                .getPublicUrl(storagePath);
            
            console.log('‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω:', publicUrl);
            return {
                path: storagePath,
                url: publicUrl
            };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Storage:', error);
            throw error;
        }
    }

    // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ Storage
    async downloadFileFromStorage(path) {
        try {
            const { data, error } = await this.supabase.storage
                .from('excel-files')
                .download(path);
            
            if (error) throw error;
            return data;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑ Storage:', error);
            throw error;
        }
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ Storage
    async deleteFileFromStorage(path) {
        try {
            const { error } = await this.supabase.storage
                .from('excel-files')
                .remove([path]);
            
            if (error) throw error;
            console.log('‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω –∏–∑ Storage');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Storage:', error);
            throw error;
        }
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å SQLite –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
    async getUserByUsername(username) {
        try {
            const { data: users, error } = await this.supabase
                .from('users')
                .select('*')
                .eq('username', username)
                .limit(1);
            
            if (error) throw error;
            
            if (!users || users.length === 0) {
                return null;
            }
            
            const user = users[0];
            return {
                id: user.id,
                username: user.username,
                password: user.password_hash,
                fullName: user.full_name,
                role: user.role
            };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            throw error;
        }
    }

    async getUserById(id) {
        try {
            const { data: user, error } = await this.supabase
                .from('users')
                .select('*')
                .eq('id', id)
                .single();
            
            if (error) throw error;
            
            return {
                id: user.id,
                username: user.username,
                fullName: user.full_name,
                role: user.role
            };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID:', error);
            throw error;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    async getReportsData() {
        try {
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
            return {
                message: '–î–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–æ–≤ –∏–∑ Supabase'
            };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤:', error);
            throw error;
        }
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    async close() {
        console.log('üîå Supabase —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
        return true;
    }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const supabaseDb = new SupabaseDatabase();

module.exports = supabaseDb;
