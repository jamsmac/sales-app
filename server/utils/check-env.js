const requiredEnvVars = {
    JWT_SECRET: {
        required: true,
        minLength: 32,
        description: '–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è JWT —Ç–æ–∫–µ–Ω–æ–≤ (–º–∏–Ω–∏–º—É–º 32 —Å–∏–º–≤–æ–ª–∞)'
    },
    DATABASE_TYPE: {
        required: true,
        values: ['sqlite', 'supabase'],
        description: '–¢–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: sqlite –∏–ª–∏ supabase'
    },
    SUPABASE_URL: {
        required: () => process.env.DATABASE_TYPE === 'supabase',
        pattern: /^https:\/\/.+\.supabase\.co$/,
        description: 'URL –≤–∞—à–µ–≥–æ Supabase –ø—Ä–æ–µ–∫—Ç–∞'
    },
    SUPABASE_SERVICE_KEY: {
        required: () => process.env.DATABASE_TYPE === 'supabase',
        minLength: 100,
        description: 'Service Role Key –∏–∑ Supabase'
    }
};

function checkEnvironment() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
    const errors = [];
    const warnings = [];
    
    for (const [key, config] of Object.entries(requiredEnvVars)) {
        const value = process.env[key];
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        const isRequired = typeof config.required === 'function' 
            ? config.required() 
            : config.required;
        
        if (isRequired && !value) {
            errors.push(`‚ùå ${key}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (${config.description})`);
            continue;
        }
        
        if (!value) continue;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
        if (config.minLength && value.length < config.minLength) {
            errors.push(`‚ùå ${key}: —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è (–º–∏–Ω–∏–º—É–º ${config.minLength} —Å–∏–º–≤–æ–ª–æ–≤)`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if (config.values && !config.values.includes(value)) {
            errors.push(`‚ùå ${key}: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ "${value}" (–¥–æ–ø—É—Å—Ç–∏–º—ã–µ: ${config.values.join(', ')})`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        if (config.pattern && !config.pattern.test(value)) {
            errors.push(`‚ùå ${key}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç`);
        }
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    if (process.env.NODE_ENV === 'production') {
        if (process.env.JWT_SECRET === 'your-super-secret-jwt-key-here') {
            errors.push('‚ùå JWT_SECRET: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ production!');
        }
        
        if (!process.env.HTTPS) {
            warnings.push('‚ö†Ô∏è  HTTPS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è production');
        }
    }
    
    // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if (errors.length > 0) {
        console.error('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        console.error('üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:');
        console.error('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        errors.forEach(err => console.error(err));
        console.error('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
        
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞ .env
        console.log('üìù –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ .env —Ñ–∞–π–ª–∞:');
        console.log('-----------------------------------');
        console.log('PORT=3000');
        console.log('NODE_ENV=production');
        console.log('JWT_SECRET=' + require('crypto').randomBytes(32).toString('hex'));
        console.log('DATABASE_TYPE=supabase');
        console.log('SUPABASE_URL=https://your-project.supabase.co');
        console.log('SUPABASE_SERVICE_KEY=eyJ...');
        console.log('-----------------------------------\n');
        
        process.exit(1);
    }
    
    if (warnings.length > 0) {
        console.warn('\n‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:');
        warnings.forEach(warn => console.warn(warn));
    }
    
    console.log('‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n');
}

module.exports = checkEnvironment;
