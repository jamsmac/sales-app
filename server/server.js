const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');
const morgan = require('morgan');
const winston = require('winston');
const path = require('path');
require('dotenv').config();

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('./utils/check-env')();

// –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê JWT_SECRET
const JWT_SECRET = process.env.JWT_SECRET;
if (!JWT_SECRET || JWT_SECRET === 'your-super-secret-jwt-key-here' || JWT_SECRET.length < 32) {
    console.error('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.error('üî¥ FATAL ERROR: JWT_SECRET –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!');
    console.error('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.error('1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª .env');
    console.error('2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ JWT_SECRET –º–∏–Ω–∏–º—É–º 32 —Å–∏–º–≤–æ–ª–∞');
    console.error('3. –ü—Ä–∏–º–µ—Ä: JWT_SECRET=' + require('crypto').randomBytes(32).toString('hex'));
    console.error('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    process.exit(1);
}

const authRoutes = require('./routes/auth');
const filesRoutes = require('./routes/files');
const ordersRoutes = require('./routes/orders');
const reportsRoutes = require('./routes/reports');

const app = express();
const PORT = process.env.PORT || 3000;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const logger = winston.createLogger({
    level: process.env.LOG_LEVEL || 'info',
    format: winston.format.combine(
        winston.format.timestamp(),
        winston.format.errors({ stack: true }),
        winston.format.json()
    ),
    defaultMeta: { service: 'sales-analytics' },
    transports: [
        new winston.transports.File({ filename: 'logs/error.log', level: 'error' }),
        new winston.transports.File({ filename: 'logs/combined.log' }),
    ],
});

// –í development —Ä–µ–∂–∏–º–µ —Ç–∞–∫–∂–µ –ª–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
if (process.env.NODE_ENV !== 'production') {
    logger.add(new winston.transports.Console({
        format: winston.format.combine(
            winston.format.colorize(),
            winston.format.simple()
        )
    }));
}

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
const fs = require('fs');
const logsDir = path.join(__dirname, '../logs');
if (!fs.existsSync(logsDir)) {
    fs.mkdirSync(logsDir, { recursive: true });
}

// Middleware
app.use(helmet({
    contentSecurityPolicy: {
        directives: {
            defaultSrc: ["'self'"],
            styleSrc: ["'self'", "'unsafe-inline'", "https://cdn.jsdelivr.net"],
            scriptSrc: ["'self'", "'unsafe-inline'", "'unsafe-hashes'", "https://cdn.jsdelivr.net"],
            scriptSrcAttr: ["'unsafe-inline'"],
            imgSrc: ["'self'", "data:", "https:"],
            connectSrc: ["'self'"],
            fontSrc: ["'self'", "https://cdn.jsdelivr.net"],
            objectSrc: ["'none'"],
            mediaSrc: ["'self'"],
            frameSrc: ["'none'"],
        },
    },
    crossOriginEmbedderPolicy: false
}));

app.use(compression());

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ morgan –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
app.use(morgan('combined', {
    stream: {
        write: (message) => logger.info(message.trim())
    }
}));

app.use(cors({
    origin: process.env.ALLOWED_ORIGINS ? process.env.ALLOWED_ORIGINS.split(',') : true,
    credentials: true
}));

app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Cookie parser –¥–ª—è httpOnly cookies
const cookieParser = require('cookie-parser');
app.use(cookieParser());

// CSRF –∑–∞—â–∏—Ç–∞
const csrf = require('csurf');
const csrfProtection = csrf({ 
    cookie: {
        httpOnly: true,
        secure: process.env.NODE_ENV === 'production',
        sameSite: 'strict'
    }
});

// –ü—Ä–∏–º–µ–Ω—è–µ–º CSRF –∑–∞—â–∏—Ç—É –∫–æ –≤—Å–µ–º POST/PUT/DELETE –∑–∞–ø—Ä–æ—Å–∞–º
app.use('/api', csrfProtection);

// Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è CSRF —Ç–æ–∫–µ–Ω–∞
app.get('/api/csrf-token', (req, res) => {
    res.json({ csrfToken: req.csrfToken() });
});

// Health check endpoint
app.get('/health', (req, res) => {
    res.json({ 
        status: 'OK', 
        timestamp: new Date().toISOString(),
        version: '5.0.0',
        environment: process.env.NODE_ENV || 'development'
    });
});

// –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –∫–æ—Ä–Ω—è –Ω–∞ login
app.get('/', (req, res) => {
    res.redirect('/login.html');
});

// Static files
app.use(express.static(path.join(__dirname, '../public')));
app.use('/uploads', express.static(path.join(__dirname, '../uploads')));
app.use('/exports', express.static(path.join(__dirname, '../exports')));

// –í—ã–±–æ—Ä —Ä–æ—É—Ç–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
const DATABASE_TYPE = process.env.DATABASE_TYPE || 'sqlite';
const filesRouter = DATABASE_TYPE === 'supabase' || process.env.NODE_ENV === 'production'
    ? require('./routes/files-memory')  // –î–ª—è –æ–±–ª–∞–∫–∞ (Railway/Heroku)
    : require('./routes/files');         // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

console.log(`üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä: ${DATABASE_TYPE === 'supabase' || process.env.NODE_ENV === 'production' ? 'memory' : 'disk'}`);

// API Routes
app.use('/api/auth', authRoutes);
app.use('/api/files', filesRouter);
app.use('/api/orders', ordersRoutes);
app.use('/api/reports', reportsRoutes);

const db = DATABASE_TYPE === 'supabase' 
    ? require('./utils/supabase')
    : require('./utils/database');

console.log(`üóÑÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${DATABASE_TYPE}`);

// Database info endpoint
app.get('/api/database/info', require('./middleware/auth.middleware'), async (req, res) => {
    try {
        const info = await db.getDatabaseInfo();
        res.json(info);
    } catch (error) {
        logger.error('Database info error:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö' });
    }
});

// Clear database (admin only)
app.delete('/api/database/clear', 
    require('./middleware/auth.middleware'),
    (req, res, next) => {
        if (req.user.role !== 'admin') {
            return res.status(403).json({ error: '–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
        }
        next();
    },
    async (req, res) => {
        try {
            const db = require('./utils/database');
            const result = await db.clear();
            logger.info(`Database cleared by user ${req.user.username}`);
            res.json(result);
        } catch (error) {
            logger.error('Database clear error:', error);
            res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' });
        }
    }
);

// Export endpoint
app.get('/api/export', require('./middleware/auth.middleware'), async (req, res) => {
    const XLSX = require('xlsx');
    const fs = require('fs').promises;
    const db = require('./utils/database');
    
    try {
        const orders = await db.getOrders();
        
        if (orders.length === 0) {
            return res.status(400).json({ error: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞' });
        }
        
        // –°–æ–∑–¥–∞–µ–º workbook
        const wb = XLSX.utils.book_new();
        
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        const exportData = orders.map(order => ({
            '–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞': order.orderNumber || '',
            '–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞': order.productCode || '',
            '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞': order.productName || '',
            '–í–∞—Ä–∏–∞–Ω—Ç': order.productVariant || '',
            '–¢–∏–ø –æ–ø–ª–∞—Ç—ã': order.paymentType || '',
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': order.quantity || 0,
            '–ï–¥–∏–Ω–∏—Ü–∞': order.unit || '',
            '–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É': order.pricePerUnit || 0,
            '–°–∫–∏–¥–∫–∞ %': order.discountPercent || 0,
            '–°—É–º–º–∞ —Å–∫–∏–¥–∫–∏': order.discountAmount || 0,
            '–û–±—â–∞—è —Å—É–º–º–∞': order.totalAmount || 0,
            '–í–æ–∑–≤—Ä–∞—Ç': order.isReturn ? '–î–∞' : '–ù–µ—Ç',
            '–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏': order.operationDate || '',
            '–í—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏': order.operationTime || '',
            '–ö–∞—Å—Å–∏—Ä': order.cashier || '',
            '–°–º–µ–Ω–∞': order.shift || '',
            '–ù–æ–º–µ—Ä —á–µ–∫–∞': order.checkNumber || '',
            '–ö–ª–∏–µ–Ω—Ç': order.customerName || '',
            '–¢–µ–ª–µ—Ñ–æ–Ω': order.customerPhone || '',
            '–ü—Ä–∏–º–µ—á–∞–Ω–∏—è': order.notes || '',
            '–°—Ç–∞—Ç—É—Å': order.status || ''
        }));
        
        const ws = XLSX.utils.json_to_sheet(exportData);
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
        const colWidths = [
            { wch: 15 }, // –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
            { wch: 12 }, // –ö–æ–¥ —Ç–æ–≤–∞—Ä–∞
            { wch: 25 }, // –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            { wch: 15 }, // –í–∞—Ä–∏–∞–Ω—Ç
            { wch: 12 }, // –¢–∏–ø –æ–ø–ª–∞—Ç—ã
            { wch: 10 }, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            { wch: 8 },  // –ï–¥–∏–Ω–∏—Ü–∞
            { wch: 12 }, // –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É
            { wch: 10 }, // –°–∫–∏–¥–∫–∞ %
            { wch: 12 }, // –°—É–º–º–∞ —Å–∫–∏–¥–∫–∏
            { wch: 12 }, // –û–±—â–∞—è —Å—É–º–º–∞
            { wch: 8 },  // –í–æ–∑–≤—Ä–∞—Ç
            { wch: 18 }, // –î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
            { wch: 12 }, // –í—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏
            { wch: 15 }, // –ö–∞—Å—Å–∏—Ä
            { wch: 8 },  // –°–º–µ–Ω–∞
            { wch: 15 }, // –ù–æ–º–µ—Ä —á–µ–∫–∞
            { wch: 20 }, // –ö–ª–∏–µ–Ω—Ç
            { wch: 15 }, // –¢–µ–ª–µ—Ñ–æ–Ω
            { wch: 25 }, // –ü—Ä–∏–º–µ—á–∞–Ω–∏—è
            { wch: 12 }  // –°—Ç–∞—Ç—É—Å
        ];
        ws['!cols'] = colWidths;
        
        XLSX.utils.book_append_sheet(wb, ws, '–ó–∞–∫–∞–∑—ã');
        
        const fileName = `export_${new Date().toISOString().slice(0, 10)}_${Date.now()}.xlsx`;
        const filePath = path.join(__dirname, '../exports', fileName);
        
        await fs.mkdir(path.join(__dirname, '../exports'), { recursive: true });
        XLSX.writeFile(wb, filePath);
        
        logger.info(`Export created by user ${req.user.username}: ${fileName}`);
        
        res.json({ 
            success: true,
            fileName: fileName,
            url: `/exports/${fileName}`,
            recordsCount: orders.length
        });
    } catch (error) {
        logger.error('Export error:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö' });
    }
});

// Error handling middleware
app.use((err, req, res, next) => {
    logger.error('Unhandled error:', {
        error: err.message,
        stack: err.stack,
        url: req.url,
        method: req.method,
        ip: req.ip,
        userAgent: req.get('User-Agent')
    });
    
    res.status(err.status || 500).json({ 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        message: process.env.NODE_ENV === 'development' ? err.message : undefined,
        timestamp: new Date().toISOString()
    });
});

// 404 handler
app.use((req, res) => {
    logger.warn(`404 Not Found: ${req.method} ${req.url}`, {
        ip: req.ip,
        userAgent: req.get('User-Agent')
    });
    
    res.status(404).json({ 
        error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
        path: req.url,
        method: req.method
    });
});

// Graceful shutdown
process.on('SIGTERM', async () => {
    logger.info('SIGTERM received, shutting down gracefully');
    
    try {
        const db = require('./utils/database');
        await db.close();
        logger.info('Database connection closed');
    } catch (error) {
        logger.error('Error closing database:', error);
    }
    
    process.exit(0);
});

process.on('SIGINT', async () => {
    logger.info('SIGINT received, shutting down gracefully');
    
    try {
        const db = require('./utils/database');
        await db.close();
        logger.info('Database connection closed');
    } catch (error) {
        logger.error('Error closing database:', error);
    }
    
    process.exit(0);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('uncaughtException', (error) => {
    logger.error('Uncaught Exception:', error);
    process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
    logger.error('Unhandled Rejection at:', promise, 'reason:', reason);
    process.exit(1);
});

// –í–ê–ñ–ù–û: –¥–æ–±–∞–≤—å—Ç–µ '0.0.0.0' –¥–ª—è Railway
app.listen(PORT, '0.0.0.0', () => {
    const startupMessage = `
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë   üìä –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥–∞–∂ v5.0     ‚ïë
    ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
    ‚ïë   –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É: ${PORT}      ‚ïë
    ‚ïë   URL: ${process.env.RAILWAY_PUBLIC_DOMAIN || 'localhost:' + PORT} ‚ïë
    ‚ïë   –û–∫—Ä—É–∂–µ–Ω–∏–µ: ${process.env.NODE_ENV || 'development'}              ‚ïë
    ‚ïë   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: SQLite                 ‚ïë
    ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
    ‚ïë   –¢–µ—Å—Ç–æ–≤—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:           ‚ïë
    ‚ïë   Admin: admin / admin123             ‚ïë
    ‚ïë   –ë—É—Ö–≥–∞–ª—Ç–µ—Ä: buh1 / buh123          ‚ïë
    ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
    ‚ïë   ‚úÖ SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö              ‚ïë
    ‚ïë   ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (rate limiting)    ‚ïë
    ‚ïë   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö                ‚ïë
    ‚ïë   ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ                     ‚ïë
    ‚ïë   ‚úÖ Graceful shutdown               ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    `;
    
    console.log(startupMessage);
    logger.info('Server started successfully', {
        port: PORT,
        environment: process.env.NODE_ENV || 'development',
        database: 'SQLite'
    });
});
