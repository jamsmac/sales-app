// server/routes/files-memory.js
// –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–ê–Ø –í–ï–†–°–ò–Ø –ë–ï–ó –°–û–•–†–ê–ù–ï–ù–ò–Ø –ù–ê –î–ò–°–ö (–¥–ª—è Railway)

const express = require('express');
const multer = require('multer');
const XLSX = require('xlsx');
const router = express.Router();
const auth = require('../middleware/auth.middleware');
const db = require('../utils/database');

console.log('üìÅ Files router (memory storage) –∑–∞–≥—Ä—É–∂–µ–Ω');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏ –≤–º–µ—Å—Ç–æ –¥–∏—Å–∫–∞
const storage = multer.memoryStorage();

const upload = multer({ 
    storage: storage, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–º—è—Ç—å –≤–º–µ—Å—Ç–æ –¥–∏—Å–∫–∞
    limits: { 
        fileSize: 10 * 1024 * 1024, // –û–≥—Ä–∞–Ω–∏—á–∏–º 10MB –¥–ª—è –ø–∞–º—è—Ç–∏
        files: 1
    },
    fileFilter: (req, file, cb) => {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞:', file.originalname);
        
        if (file.originalname.match(/\.(xlsx|xls)$/i)) {
            cb(null, true);
        } else {
            cb(new Error('–¢–æ–ª—å–∫–æ Excel —Ñ–∞–π–ª—ã (.xlsx, .xls) —Ä–∞–∑—Ä–µ—à–µ–Ω—ã'));
        }
    }
});

// Upload endpoint —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤ –ø–∞–º—è—Ç–∏
router.post('/upload', 
    auth,
    (req, res, next) => {
        if (req.user.role !== 'admin') {
            return res.status(403).json({ error: '–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
        }
        next();
    },
    upload.single('file'),
    async (req, res) => {
        console.log('üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑ –ø–∞–º—è—Ç–∏');
        
        if (!req.file) {
            console.error('‚ùå –§–∞–π–ª –Ω–µ –ø–æ–ª—É—á–µ–Ω');
            return res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω' });
        }
        
        console.log('üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:');
        console.log('   - –†–∞–∑–º–µ—Ä:', req.file.size, '–±–∞–π—Ç');
        console.log('   - –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è:', req.file.originalname);
        console.log('   - MIME —Ç–∏–ø:', req.file.mimetype);
        
        try {
            // –ß–∏—Ç–∞–µ–º Excel –ø—Ä—è–º–æ –∏–∑ –±—É—Ñ–µ—Ä–∞ –≤ –ø–∞–º—è—Ç–∏
            console.log('üìñ –ß—Ç–µ–Ω–∏–µ Excel –∏–∑ –±—É—Ñ–µ—Ä–∞...');
            const workbook = XLSX.read(req.file.buffer, { type: 'buffer' });
            
            console.log('   - –õ–∏—Å—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ:', workbook.SheetNames.length);
            
            const sheetName = workbook.SheetNames[0];
            const worksheet = workbook.Sheets[sheetName];
            const data = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
            
            console.log('   - –°—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö:', data.length);
            
            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å database.js
            const fileInfo = {
                filename: `memory-${Date.now()}`,
                originalname: req.file.originalname,
                size: req.file.size,
                mimetype: req.file.mimetype
            };
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            const stats = db.processFileData(data, fileInfo, req.user.id);
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã:', stats);
            
            res.json({
                success: true,
                stats: stats,
                message: `–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –î–æ–±–∞–≤–ª–µ–Ω–æ ${stats.new} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π.`,
                file: {
                    name: req.file.originalname,
                    size: req.file.size,
                    records: data.length - 1
                }
            });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:', error);
            res.status(500).json({ 
                error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞',
                message: error.message
            });
        }
    }
);

// Get files list
router.get('/', auth, (req, res) => {
    try {
        const files = db.getFiles();
        res.json(files);
    } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤' });
    }
});

module.exports = router;
